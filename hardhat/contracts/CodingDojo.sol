// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

contract CodingDojo is Ownable {

    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    mapping(uint256 => address) public tokenOwnerMap;
    mapping(uint256 => string) public tokenUriMap;
    mapping(address => uint256) public ownerCounter;
    uint256 public counter;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor() {
        _name = "CodingDojo";
        _symbol = "CD";
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * Base URI
     */
    function _baseURI() internal pure returns (string memory) {
        return "ipfs://";
    }

    /**
     * @dev Get current Token ID and increment tokenCounter after mint
     * mint tokenId to address `_mint`
     * set token uri to tokenId `_setTokenURI`
     *
     * Requirements:
     *
     * - `uri` any string/hash that was generated by web3.storage
     * - `to` cannot be the zero address.
     *
    */
    function safeMint(address to, string memory uri) public onlyOwner {
        uint256 newTokenId = counter++;
        tokenOwnerMap[newTokenId] = to;
        tokenUriMap[newTokenId] = uri;
        ownerCounter[to]++;
    }

    /**
     * Returns the Uniform Resource Identifier (URI) for tokenId token.
     */
    function tokenURI(uint256 tokenId) public view returns (string memory) {
        return string(abi.encodePacked(_baseURI(), tokenUriMap[tokenId]));
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view returns (bool) {
        return tokenOwnerMap[tokenId]==address(0);
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view returns (uint256) {
        return counter;
    }

    /**
     * Returns the owner of the tokenId token.
     * Requirements: tokenId must exist.
    */
    function ownerOf(uint256 tokenId) external view returns (address) {
        return tokenOwnerMap[tokenId];
    }

    /**
     * Returns the owner of the tokenId token.
    */
    function balanceOf(address owner) external view returns (uint256) {        
        return ownerCounter[owner];
    }

}